//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TheLastTour.Utility
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""CameraControl"",
            ""id"": ""5524d075-7a7f-4906-bda6-f6f7246e82ab"",
            ""actions"": [
                {
                    ""name"": ""EnableCameraControl"",
                    ""type"": ""Button"",
                    ""id"": ""8b512320-95be-4086-bba6-3d35a859229e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3da2923d-f73f-48ce-8cb6-494b7c4b24b5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableCameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraControl
            m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
            m_CameraControl_EnableCameraControl = m_CameraControl.FindAction("EnableCameraControl", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraControl
        private readonly InputActionMap m_CameraControl;
        private List<ICameraControlActions> m_CameraControlActionsCallbackInterfaces = new List<ICameraControlActions>();
        private readonly InputAction m_CameraControl_EnableCameraControl;
        public struct CameraControlActions
        {
            private @InputActions m_Wrapper;
            public CameraControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @EnableCameraControl => m_Wrapper.m_CameraControl_EnableCameraControl;
            public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControlActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControlActionsCallbackInterfaces.Add(instance);
                @EnableCameraControl.started += instance.OnEnableCameraControl;
                @EnableCameraControl.performed += instance.OnEnableCameraControl;
                @EnableCameraControl.canceled += instance.OnEnableCameraControl;
            }

            private void UnregisterCallbacks(ICameraControlActions instance)
            {
                @EnableCameraControl.started -= instance.OnEnableCameraControl;
                @EnableCameraControl.performed -= instance.OnEnableCameraControl;
                @EnableCameraControl.canceled -= instance.OnEnableCameraControl;
            }

            public void RemoveCallbacks(ICameraControlActions instance)
            {
                if (m_Wrapper.m_CameraControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControlActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControlActions @CameraControl => new CameraControlActions(this);
        public interface ICameraControlActions
        {
            void OnEnableCameraControl(InputAction.CallbackContext context);
        }
    }
}
